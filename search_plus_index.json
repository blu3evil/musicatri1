{"./":{"url":"./","title":"项目简介","keywords":"","body":"Musicatri项目简介 Discord开源音乐机器人，此项目为musicatri/musicatri的二次开发版本 项目采用使用Flask、Flask_Discord等第三方库构建机器人应用程序，支持网易云音乐、Bilibili视频转音频，youtube视频转音频、niconico动画视频转音频播放，对网易云提供添加歌单作为列表功能 项目启动之后可以通过一个简单的后端控制页面来添加歌曲，页面支持播放列表重新排序功能，还包含了其他一些像背单词的小功能和彩蛋 作者原话：Support netease cloud music, bilibili, youtube, niconico douga, Supports adding playlists and searching NetEase Cloud Music songs. A web client is avaliable to add songs and adjust the order of the queue list. There are other small features and easter eggs like vocabulary tests 相关仓库链接： musicatri/musicatri：https://musicatri.github.io/ （原始仓库） blu3evil/musicatri：https://github.com/blu3evil/musicatri1 （二次开发） powered by GitbookLast edited on: 2024-10-15 15:38:24 "},"DeployDiscordBot.html":{"url":"DeployDiscordBot.html","title":"先决条件","keywords":"","body":"配置DiscordBot Musicatri是一个Discord机器人项目，因此部署项目之前，您应确保已经创建了一个可用的机器人应用，以及，您需要一定的服务器权限来邀请机器人进入服务器 如果您是第一次创建过机器人应用并对此不够熟悉，可以参考下面的说明文档，文档详细阐述了如何创建一个机器人应用并获得这个应用的链接参数 您可以在 Discord开发者平台 创建属于您的机器人应用： 在页面当中点击右上角的【New Application】并键入应用名称来创建一个新的应用 点击左侧边栏中的【OAuth2】并记下属于您的CLIENT ID以及CLIENT SECRET（需要先重置）：后面部署Musicatri时将会用到它们 然后进入侧边栏中的【Bot】获取机器人的Token（需要先重置）： 到这一步机器人相关的配置就完成了 如果您还没有可用的服务器，我们推荐您创建一个Discord服务器用于机器人调试： 点击左侧列表的【添加服务器】来添加一个新的服务器吧！ powered by GitbookLast edited on: 2024-10-15 16:47:09 "},"DeployDirectly.html":{"url":"DeployDirectly.html","title":"分步部署","keywords":"","body":"分步部署 项目除开最核心的Musicatri之外，还依赖于其他第三方服务提供的接口，例如Mongodb、NeteaseCloudMusicApi甚至是Clash，服务的数量可能随着项目功能的更新逐渐增多。 如果您的机器上已经运行存在这些服务，那么可以单独运行Musicatri，Musicatri的运行是十分简单的，只需要通过我们提供的配置文件正确指定这些服务的地址，Musicatri就能够正常工作。 如果您还没有部署这些服务，这份文档也提供了这一系列Musicatri所需服务的简单部署配置方案，当然，如果您需要针对这些服务进行进一步的配置，我们仍然极力推荐您前往官方的站点阅读相关服务的开发文档。 除此之外，在文档对应的服务介绍页面，我们也会在显要位置标注服务的官方站点，或者资料来源，以进一步方便您的部署工作。 如果您需要简单的部署，强烈推荐您使用DockerCompose部署，那里提供了简单的一键部署策略 powered by GitbookLast edited on: 2024-10-15 21:02:43 "},"DeployNeteaseCloudMusicApi.html":{"url":"DeployNeteaseCloudMusicApi.html","title":"NeteaseCloudMusicApi","keywords":"","body":"部署NeteaseCloudMusicApi 项目地址：https://www.npmjs.com/package/NeteaseCloudMusicApi?activeTab=readme musicatri项目运行时需要依赖一个可以访问的neteasecloudmusicapi应用，后者提供操作网易云音乐接口功能 # 安装nvm，使用20.18.0版本的node curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash && source ~/.bashrc nvm install 20.18.0 nvm use 20.18.0 # 通过npx直接运行neteasecloudmusicapi项目 # 为neteasecloudmusicapi创建根目录 mkdir ./neteasecloudmusicapi/ && cd ./neteasecloudmusicapi # 安装项目依赖 npm install NeteaseCloudMusicApi # 在3000端口运行neteasecloudmusicapi npx NeteaseCloudMusicApi@latest # 你也可以手动指定端口运行，例如指定在4000端口 PORT=4000 npx NeteaseCloudMusicApi@latest server running @ http://localhost:3000 # 项目运行回显 通过 http://localhost:3000 访问NeteaseCloudMusicApi项目，可以点击主页链接参看开发文档 powered by GitbookLast edited on: 2024-10-15 18:40:42 "},"DeployMongodb.html":{"url":"DeployMongodb.html","title":"Mongodb","keywords":"","body":"部署Mongodb MongoDB社区版安装指南：https://www.mongodb.com/zh-cn/docs/manual/tutorial/install-mongodb-on-ubuntu/ musicatri项目运行时依赖于MongoDB作为数据库进行数据持久化，可以使用已有的MongoDB数据库，如果手头还没有可以连接的MongoDB，可以按照下面的步骤来部署一个： # 安装mongodb依赖 sudo apt install gnupg curl wget -y # 导入MongoDB公共GPG密钥 wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add - # 为Ubuntu 20.04(Focal)创建列表文件(其他版本参考上面的安装指南链接) echo \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list # 更新apt源 sudo apt update # 安装最新稳定版本mongodb sudo apt install mongodb-org -y # apt安装mongodb的默认数据目录: /var/lib/mongodb # apt安装mongodb的默认日志目录: /var/log/mongodb # 配置文件: /etc/mongod.conf # 启动mongodb服务 mongod --config /etc/mongod.conf 可以通过mongosh尝试连接mongodb检查是否mongodb状态： mongosh --host localhost --port 27017 # 连接mongodb://localhost:27017 show databases; powered by GitbookLast edited on: 2024-10-15 18:40:03 "},"DeployMusicatri.html":{"url":"DeployMusicatri.html","title":"Musicatri部署","keywords":"","body":"部署Musicatri 我们假设您已经完成了NeteaseCloudMusicApi，Mongodb服务的部署，并且它们顺利运行，Musicatri的部署文档并不会涉及上面两个服务的部署事宜 如果您还没有可以使用的Mongodb或者NeteaseCloudMusicApi，您可以参考列表中关于它们的部署文档，或是前往官方站点了解如何部署它们 手动部署 首先请确保环境可以运行ffmpeg，Musicatri中的Discord API依赖ffmpeg执行音频流播放： ffmpeg -version # 在命令行打印当前ffmpeg版本 如果没有安装ffmpeg，可以通过包管理器来快速安装 # for Linux apt install ffmpeg -y # for Windows scoop install ffmpeg blu3evil/musicatri仓库的main分支代表了此项目的稳定版本，推荐使用此分支进行Musicatri服务的部署，可以使用下面的命令将项目拉取到您的本地： git clone https://github.com/blu3evil/musicatri1.git && cd musicatri1 项目采用Python编写，因此请确保当前python环境可用，我们推荐使用Python3.11版本运行此项目，您可以使用Miniconda为此项目创建一个python虚拟环境： # 安装miniconda wget https://repo.anaconda.com/miniconda/Miniconda3-py39_4.9.2-Linux-x86_64.sh bash ./Miniconda3-py39_4.9.2-Linux-x86_64.sh conda create -n musicatri python=3.11 # 创建项目运行使用的虚拟环境 conda activate musicatri # 激活虚拟环境 在项目源码目录下，使用requirements.txt安装项目需要的依赖： pip install -r requirements.txt # 安装项目所需依赖 在运行项目之前您需要进行一些简单的配置：在项目的根路径下存在config.json配置文件，其中涉及了项目的全部配置项，将您的机器人应用的CLIENT ID、CLIENT SECRET、Token分别复制到配置文件中 \"DISCORD_CLIENT_ID\": \"your client id\" \"DISCORD_CLIENT_SECRET\": \"your clientsecret\" \"DISCORD_BOT_TOKEN\": \"your bot's token\" 配置Musicatri服务正确指向NeteaseCloudMusicApi和Mongodb服务： \"NETEASECLOUDMUSICAPI_URL\": \"http://localhost:3000\" \"MONGODB_URL\": \"mongodb://localhost:27017\" 如果您为服务配置了域名或者服务处于具有公网IP的云服务器环境，并且您希望能够通过公网访问Musicatri服务控制台页面，那么修改 \"PUBLIC_URL\": \"http://localhost:5000\" \"DISCORD_REDIRECT_URI\": \"http://localhost:5000/account/callback\" 请注意DISCORD_REDIRECT_URI一般配置为${PUBLIC_URL}/account/callback的形式 到这一步全部的配置就完成了，可以通过命令来启动Musicatri： python musicatri.py 2024-10-15 15:57:42:INFO:主人我目前加入了1个服务器哦 # 控制台回显 如果一切顺利的话，你应该可以在你的服务器当中看到机器人上线了，挑选一首喜好的网易云音乐，复制其链接，或是直接复制bilibili视频页面URL，在服务器键入下面的命令来播放它 ${DISCORD_BOT_COMMAND_PREFIX}play ${VOICE_URL} 你也可以进入Musicatri的控制台管理页面，比如 http://localhost:5000/songctl 来手动加入歌曲，或者调整歌曲播放列表排序 机器人会加入服务器的语音频道并开始播放音乐，加入语音频道来一起听歌吧！ 使用docker部署 项目提供了很完备的Docker部署支持，或者说项目主推Docker部署，因为那样能够省去很多麻烦，Musicatri服务已经被打包作为镜像同时传到了DockerHub以及阿里云镜像托管，因此你可以直接拉取它们（国内环境使用后者） # from dockerhub docker pull pineclone/musicatri:latest # from aliyun registry docker pull registry.cn-hangzhou.aliyuncs.com/pineclone/musicatri:latest 为项目服务创建一个根目录： mkdir musicatri && cd musicatri 通过命令来运行容器：由于项目配置项较多，使用-e逐条指定环境变量将十分麻烦，推荐使用.env作为环境变量配置文件来运行容器：可以直接从项目仓库拉取一份示例配置并保存到本地： # for Linux curl https://raw.githubusercontent.com/blu3evil/musicatri1/refs/heads/main/docker/env.example > ./.env # for Windows Invoke-RestMethod -Uri https://raw.githubusercontent.com/blu3evil/musicatri1/refs/heads/main/docker/env.example > ./.env 修改.env配置文件：写入您的机器人应用的CLIENT ID、CLIENT SECRET以及Token配置项： # Discord机器人应用客户端ID DISCORD_CLIENT_ID=\"your client id\" # Discord机器人应用客户端密匙 DISCORD_CLIENT_SECRET=\"your client secret\" # Discord机器人认证Token DISCORD_BOT_TOKEN=\"your bot token\" 配置Musicatri服务正确指向NeteaseCloudMusicApi和Mongodb服务： # NeteaseCloudMusicApi服务地址 NETEASECLOUDMUSICAPI_URL=http://localhost:3000 # MongoDB数据库服务地址 MONGODB_URL=mongodb://localhost:27017 如果您在配备公网ip的云服务器环境运行，或者配置了域名，希望外部可以通过域名或者公网ip访问Musicatri管理后台，那么修改PUBLIC_URL以及callback认证地址： # Musicatri服务端地址，如果服务配置了域名那么将这一项替换 PUBLIC_URL=http://localhost:5000 # DiscordOAuth2重定向地址，请配置为PUBLIC_URL/account/callback的格式 DISCORD_REDIRECT_URI=http://localhost:5000/account/callback 使用命令来启动Musicatri容器吧 docker-compose run --name musicatri -p 5000:5000 -it --rm --env-file ./.env pineclone/musicatri:latest 如果使用compose形式启动，那么创建compose.yml配置文件： echo \"\" > compose.dev.env.yml && vim compose.dev.env.yml # 新建配置文件 version: \"3.8\" services: musicatri: image: pineclone/musicatri:${MUSICATRI_TAG} ports: - \"5000:5000\" tty: true stdin_open: true environment: - NETEASECLOUDMUSICAPI_URL=${NETEASECLOUDMUSICAPI_URL} - MONGODB_URL=${MONGODB_URL} - SERVER_PORT=${SERVER_PORT} - PUBLIC_URL=${PUBLIC_URL} - APP_SECRET_KEY=${APP_SECRET_KEY} - DISCORD_REDIRECT_URI=${DISCORD_REDIRECT_URI} - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID} - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET} - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN} - DISCORD_BOT_BANNER=${DISCORD_BOT_BANNER} - DISCORD_BOT_ACTIVITY=${DISCORD_BOT_ACTIVITY} - DISCORD_BOT_COMMAND_PREFIX=${DISCORD_BOT_COMMAND_PREFIX} - YOUTUBEDL_PROXY=${YOUTUBEDL_PROXY} - CONSOLE_LOG_LEVEL=${CONSOLE_LOG_LEVEL} - LOGFILE_LOG_LEVEL=${LOGFILE_LOG_LEVEL} - LOG_BASIC_FORMAT=${LOG_BASIC_FORMAT} - LOG_DATE_FORMAT=${LOG_DATE_FORMAT} docker-compose compose up -d # 启动容器 和直接部署一样，如果一切顺利的话，就可以在你的服务器当中看到机器人上线了，挑选一首喜好的网易云音乐，复制其链接，或是直接复制bilibili视频页面URL，在服务器键入下面的命令来播放它 ${DISCORD_BOT_COMMAND_PREFIX}play ${VOICE_URL} 你也可以进入Musicatri的控制台管理页面，比如 http://localhost:5000/songctl 来手动加入歌曲，或者调整歌曲播放列表排序 机器人会加入服务器的语音频道并开始播放音乐，加入语音频道来一起听歌吧！ powered by GitbookLast edited on: 2024-10-15 18:51:21 "},"DeployByDockerCompose.html":{"url":"DeployByDockerCompose.html","title":"DockerCompose部署","keywords":"","body":"DockerCompose部署 得益于Docker Compose对所有程序依赖的服务进行统一的组织管理，我们可以通过DockerCompose来实现项目的一键启动，为了适应不同的环境，我们为项目编写了不止一套compose文件，这些文件适用于不同的生产环境，从而确保项目能够适配更多的场景 项目一键部署相关的DockerCompose配置主要集中在/docker-compose目录下，我们使用尽可能见名知意的命名规则来命名每一个DockerCompose文件，来使得它们更容易被理解，例如： 以下是生产环境所使用的compose文件： compose.prod.aliyun.yml compose.prod.yml aliyun字样代表其使用我们上传到阿里云镜像仓库的镜像来启动服务，这是为了针对一些云服务器环境不方便使用代理而设计的，如果您在本地并且拥有一个健康的代理环境，可以连接Dockerhub，那么可以直接使用第二份compose文件 使用DockerCompose一键部署只需要很少的步骤：首先通过github直接获取这份Compose文件：您可以根据自身所处环境来选择是否使用阿里云镜像：（下面以一般环境为例） 为项目创建根目录 mkdir musicatri && cd musicatri 通过github仓库拉取compose文件： # for Linux curl https://raw.githubusercontent.com/blu3evil/musicatri1/refs/heads/main/docker/compose.prod.yml > compose.yml # for Windows Invoke-RestMethod -Uri https://raw.githubusercontent.com/blu3evil/musicatri1/refs/heads/main/docker/compose.prod.yml > ./.env 通过github仓库拉取环境配置文件（用于配置Musicatri）： # for Linux curl https://raw.githubusercontent.com/blu3evil/musicatri1/refs/heads/main/docker/env.example > .env # for Windows Invoke-RestMethod -Uri https://raw.githubusercontent.com/blu3evil/musicatri1/refs/heads/main/docker/env.example > ./.env 然后您需要配置.env文件当中的数个配置项：这一步和使用Docker部署Musicatri几乎没有差异，修改.env配置文件：写入您的机器人应用的CLIENT ID、CLIENT SECRET以及Token配置项： # Discord机器人应用客户端ID DISCORD_CLIENT_ID=\"your client id\" # Discord机器人应用客户端密匙 DISCORD_CLIENT_SECRET=\"your client secret\" # Discord机器人认证Token DISCORD_BOT_TOKEN=\"your bot token\" 如果您在配备公网ip的云服务器环境运行，或者配置了域名，希望外部可以通过域名或者公网ip访问Musicatri管理后台，那么修改PUBLIC_URL以及callback认证地址： # Musicatri服务端地址，如果服务配置了域名那么将这一项替换 PUBLIC_URL=http://localhost:5000 # DiscordOAuth2重定向地址，请配置为PUBLIC_URL/account/callback的格式 DISCORD_REDIRECT_URI=http://localhost:5000/account/callback 注：如果您熟悉DockerCompose，我们支持您按照自己的偏好修改DockerCompose文件以适应您当前的运行环境，或是一些个性化需求，如果不然，请不要轻易改动它，这极有可能导致项目不能正常运行，您应该仅仅修改.env文件，这份文件的配置已经能完成绝大多数需求 随后运行这份compose文件来启动项目即可： docker compose up -d 这会启动多个docker容器，它们共同组成Musicatri项目本体 如果一切启动正常，您就可以在服务器中看到机器人上线了，通过 http://localhost:5000 端口来访问Musicatri的控制台，您可以在上面点歌，Musicatri会加入频道中并播放音乐，加入频道一起摇滚吧~ powered by GitbookLast edited on: 2024-10-15 21:16:22 "},"AboutProxy.html":{"url":"AboutProxy.html","title":"关于代理","keywords":"","body":"关于代理 如果您的环境不允许连接Discord，这在一些地区是很正常的现象，您可能需要一套代理来协助服务的正常部署，我们也考虑到了这一点，并为此提供了相应的配置文件 powered by GitbookLast edited on: 2024-10-15 21:12:02 "},"HowToDevelop.html":{"url":"HowToDevelop.html","title":"如何开发","keywords":"","body":"如何开发 目前项目还处在开发阶段，并存在许多不合理的配置，很多地方甚至可以说是缺陷，我们正在积极地修缮它们，并进我们所能将它变得更好，如果您对此项目同样感兴趣，我们非常欢迎您向我们的项目提交pull request，来将这个项目构建的更加完善 由于目前项目结构还不完善，开发相关的支持文档会在随后完善。 powered by GitbookLast edited on: 2024-10-15 21:16:18 "},"TODOList.html":{"url":"TODOList.html","title":"待办事项","keywords":"","body":"代办事项 添加语言选项以及英文支持☑️ 添加youtube搜索支持 c̶r̶e̶a̶t̶e̶ ̶a̶ ̶n̶e̶w̶ ̶c̶h̶r̶o̶m̶e̶ ̶i̶n̶s̶t̶a̶n̶c̶e̶ ̶f̶o̶r̶ ̶e̶a̶c̶h̶ ̶a̶c̶t̶i̶v̶e̶ ̶g̶u̶i̶l̶d̶ ̶f̶o̶r̶ ̶s̶o̶n̶g̶ ̶s̶e̶a̶r̶c̶h̶i̶n̶g̶,̶ ̶o̶r̶ ̶c̶r̶e̶a̶t̶e̶ ̶a̶ ̶q̶u̶e̶u̶e̶ ̶f̶o̶r̶ ̶s̶o̶n̶g̶ ̶s̶e̶a̶r̶c̶h̶ ̶r̶e̶q̶u̶e̶s̶t̶s̶☑️ 修复NeteaseCloudMusicApi使用问题 use a list instead of a dictonary for queue list use something other than a pull request every 2 second to update song information for the website 添加对网易云播客播放功能支持 控制台进度条拖动控制播放进度功能 powered by GitbookLast edited on: 2024-10-15 20:57:34 "}}